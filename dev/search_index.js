var documenterSearchIndex = {"docs":
[{"location":"#OkValueSegments","page":"Home","title":"OkValueSegments","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OkValueSegments.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#OkValueSegments.csegid-Tuple{AbstractVector}","page":"Home","title":"OkValueSegments.csegid","text":"csegid(v::AbstractVector) -> Vector{Int}\n\nLabels contiguous runs of identical values in a vector v.\n\nEach time the value changes compared to the previous element in v, the segment ID increments. The first segment always has ID 1.\n\nThis function handles any element type that supports the != comparison.\n\nArguments\n\nv: An AbstractVector containing the sequence of values.\n\nReturns\n\nVector{Int}: A vector of the same length as v, containing the segment IDs.                Returns an empty vector if v is empty.\n\nExamples\n\njulia> using OkValueSegments\n\njulia> csegid([1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0])\n14-element Vector{Int64}:\n 1\n 2\n 2\n 2\n 3\n 3\n 3\n 3\n 3\n 4\n 4\n 4\n 4\n 4\n\njulia> csegid([:a, :a, :b, :b, :a, :c])\n6-element Vector{Int64}:\n 1\n 1\n 2\n 2\n 3\n 4\n\nNoted that NaNs are considered as different values:\n\njulia> csegid([1.0, NaN, NaN, 2.0]) == [1, 2, 3, 4]\ntrue\n\n\n\n\n\n","category":"method"}]
}
